create database test;
use test;

-- 1. 각 테이블을 생성합니다.

create table tbl_member
(
	member_id int not null,
    member_name varchar(10) not null,
    member_identity varchar(10),
    member_grade char(3) not null,
    member_addr varchar(100) not null,
    member_phone varchar(20)
);

create table tbl_book
(
	book_code int not null,
    classification_id int not null,
    book_author varchar(45),
    book_name varchar(45),
    publisher varchar(45),
    isrental char(1) not null
);

create table tbl_rental
(
	rental_id int not null,
    book_code int not null,
    member_id int not null
);


-- 2. tbl_member 의 member_id 에 primary key 제약 조건 설정하세요.
--    PK 는 auto_increment 설정을 합니다.

alter table tbl_member add constraint PK_tbl_member primary key(member_id);
alter table tbl_member modify member_id int auto_increment;


-- 3. tbl_book 의 book_code 에 promary key 제약 조건 설정하세요
--    PK 는 auto_increment 설정을 합니다.

alter table tbl_book add constraint PK_tbl_book primary key(book_code);
alter table tbl_book modify book_code int auto_increment;


-- 4. tbl_rental 의 rental_id 에 promary key 제약 조건 설정하세요
--    PK 는 auto_increment 설정을 합니다.

alter table tbl_rental add constraint PK_tbl_rental primary key(rental_id);
alter table tbl_rental modify rental_id int auto_increment;


-- 5. tbl_rental 의 book_code 에 tbl_book 의 book_code (PK) 를 참조하는 FK 설정하세요

alter table tbl_rental add constraint FK_tbl_rental_book 
foreign key(book_code) references tbl_book(book_code)
on update restrict
on delete cascade;


-- 6. tbl_rental 의 member_id 에 tbl_member 의 member_id(PK)를 참조하는 FK 설정하세요

alter table tbl_rental add constraint FK_tbl_rental_member 
foreign key(member_id) references tbl_member(member_id)
on update cascade
on delete cascade;


-- 7. 각 테이블에 다음 값을 넣어보세요

insert into tbl_member values(111,'aaa','111','일반','대구','010-111-2222');
insert into tbl_member values(222,'bbb','222','VIP','울산','010-111-2222');
insert into tbl_member values(333,'ccc','333','VIP','인천','010-111-2222');
insert into tbl_member values(444,'ddd','444','일반','부산','010-111-2222');
insert into tbl_member values(555,'eee','555','VIP','서울','010-111-2222');
insert into tbl_member values(666,'fff','666','일반','경기','010-111-2222');

insert into tbl_book values(1010,1,'윤성우','열혈C','오렌지미디어','1');
insert into tbl_book values(1011,1,'남궁성','JAVA의 정석','00미디어','1');
insert into tbl_book values(1012,1,'남길동','이것이 리눅스다','한빛미디어','1');

insert into tbl_book values(2010,2,'데일카네기','인간관계론','00미디어','1');
insert into tbl_book values(2011,2,'홍길동','미움받을용기','00미디어','1');

insert into tbl_rental values(1,1010,111);
insert into tbl_rental values(2,1011,222);
insert into tbl_rental values(3,1012,333);


-- 8. 각 테이블의 제약 조건을 확인합니다

select table_name, column_name, column_key 
from information_schema.columns
where table_schema='test';


-- 9. tbl_member 의 member_addr 열에 non_unique index 를 설정합니다
--    tbl_book 의 book_author, book_name, publisher 각각에 non_unique index 설정합니다

create index idx_member_addr on tbl_member(member_addr);
create index idx_book on tbl_book(book_author, book_name, publisher);


-- 10. 다음과 같이 내용이 나오도록하는 view 테이블을 만들고 사용해 봅시다
-- 		뷰테이블명 : view_showrental
-- 		join 종류 : inner join
-- 		책을 대여한 회원에 대한 정보를 표시
-- 		rental_id, member_name, book_name 만 표시

create view view_showrental
as
select rental_id, member_name, book_name from tbl_member M
inner join tbl_rental R
on M.member_id = R.member_id
inner join tbl_book B
on B.book_code = R.book_code;

select * from view_showrental;













